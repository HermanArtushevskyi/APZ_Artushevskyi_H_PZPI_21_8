ОПИС АРХІТЕКТУРИ СИСТЕМИ

У ході роботі було розроблено реляційну базу даних за допомогою MySql. MySql – це популярна система для керування базами даних. Її функціонал надає можливість зберігати та отримувати дані за допомогою мови SQL. У проєкті було використано фреймворк EntityFramework, який надає змогу автоматично генерувати sql інструкції, використовуючи мову прогармування C#.
Під час розробки проєкту було створено наступні таблиці:
-	Users (зберігає дані користувачів),
-	Balances (зберігає дані щодо балансу користувачів),
-	Drones (зберігає дані щодо дронів),
-	DroneModels (зберігає моделі дронів),
-	DroneStatus,(зберігає дані щодо поточного стану дронів),
-	Tokens (зберігає дані щодо вхідних даних користувачів),
-	Stations (зберігає дані щодо станцій для дронів),
-	DroneToStation (таблиця, що зв’язує дрони зі станціями).
Відношення між таблицями: користувач може мати роль адміністратора, або бути звичайним користувачем. Користувач може орендувати та повертати дрон. Користувач може орендувати скільки завгодно дронів одночасно.
Кожен дрон має одну модель дрона. Кожна модель дрона має вартість. Кожен дрон має нинішній стан, який показує, чи можлива оренда дрону. Один дрон може бути прив’язан лише до однієї станції, але станція може мати декілька дронів. 

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Для створення коду серверної частини додатка було використано наступні технології:
-	 Docker: система, що надає змогу запускати додатки на будь-якій системі.
-	ASP.Net Core: система, що надає змогу створювати крос-платформні додатки за допомогою мови C#.
-	EntityFramework Core: система, які покращує роботу із базою даних, надає змогу автоматизувати рутинні задачі.
Для шифрування та зберігання конфіденційних даних користувачів використовувалась функція ключової деривації паролів PBKDF2. (Див. додаток Г)
Проект розділено на три частини:
-	Дані – створення бази даних та взаємодія із нею;
-	Бізнес логіка – DTO, моделі даних та функції для обробки користувацьких запросів (див. додатки А, Б);
-	Користувацький інтерфейс – запити та їх конфігурація, за допомогою яких користувач взаємодіє із API.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

REST – це архітектурний підхід до проектування мережевих протоколів, який надає стандартизований спосіб доступу до інформаційного ресурсу. В основі REST лежать принципи, які взято із функціонування Всесвітньої павутини. REST-архітектура визначає, як система повинна бути організована, аби бути масштабованою, гнучкою та забезпечувати простоту інтеграції між різними компонентами. Таблиця 1 наводить основні специфікації.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Далі розглянемо діаграму прецедентів, яку зображено на рисунку 2.3. Можна побачити, що адміністратор має змогу переглядати список усіх дронів, додавати дрони, видаляти дрони та змінювати інформацію щодо дронів.
Користувач має можливість зареєструватись, ввійти до акаунту, орендувати дрон, повертати дрон. Також, користувач має можливісь звернутись до технічної підтримки, у разі необхідності. У подальшому, можливо розширення функціоналу і додавання сервісу для бізнесу.

5 ПОБУДОВА ER-ДІАГРАМИ


У ході роботі було розроблено реляційну базу даних за допомогою MySql. MySql – це популярна система для керування базами даних. Її функціонал надає можливість зберігати та отримувати дані за допомогою мови SQL. У проєкті було використано фреймворк EntityFramework, який надає змогу автоматично генерувати sql інструкції, використовуючи мову прогармування C#.
Під час розробки проєкту було створено наступні таблиці:
-	Users (зберігає дані користувачів),
-	Balances (зберігає дані щодо балансу користувачів),
-	Drones (зберігає дані щодо дронів),
-	DroneModels (зберігає моделі дронів),
-	DroneStatus,(зберігає дані щодо поточного стану дронів),
-	Tokens (зберігає дані щодо вхідних даних користувачів),
-	Stations (зберігає дані щодо станцій для дронів),
-	DroneToStation (таблиця, що зв’язує дрони зі станціями).
Відношення між таблицями: користувач може мати роль адміністратора, або бути звичайним користувачем. Користувач може орендувати та повертати дрон. Користувач може орендувати скільки завгодно дронів одночасно.
Кожен дрон має одну модель дрона. Кожна модель дрона має вартість. Кожен дрон має нинішній стан, який показує, чи можлива оренда дрону. Один дрон може бути прив’язан лише до однієї станції, але станція може мати декілька дронів. 

6 СПЕЦИФІКАЦІЯ REST

Register	POST	/api/users/register	{
  "login": "string",
  "email": "string",
  "password": "string"
}
Login	POST	/api/users/login	{
 "login": "string",
 "password": "string",
}
Logout	POST	/api/users/logout	{
  "token": "string",
}
Get all users	GET	/api/users/user	{
  "token": "string",
}
Get specific user	GET	/api/users/user/{id}	{
  “token": "string",
  “id”: “int”
}
Get all drones	GET	/api/drones/all	{
  "token": "string",
}
Create drone	POST	/api/drones/create	{
 "serialNumber":"string",
  "modelId": int,
  "statusId": int,
  "currentUserId": int
}
Delete drone	DELETE	/api/drones/delete	{
  “token": "string",
  “id”: “int”}

	Продовження таблиці 1
Назва	Метод	Шлях	Тіло
Get balance	GET	/api/balances/get	{
  "token": "string",
}
Create station	POST	/api/stations/create	{
  "name": "string",
  "latitude": 0,
  "longitude": 0,
  "capacity": 0
}
Rent drone	POST	/api/drones/rent	{
  "token": "string",
  “modelId”: int,
  “longitude”: double
  “latitude”: double
}
Return drone	POST	/api/drones/return	{
  "token": "string",
  “serialNumber”: string
}

ВИСНОВКИ

У ході роботи було спроектовано та розроблено серверну частину додатку, зроблено діаграми, вказано REST-специфікацію, та записано демо-відео.

ДОДАТОК А

User.cs
  1	using System.ComponentModel.DataAnnotations;
  2  
  3  namespace Task2.Models;
  4  
  5  public class User
  6  {
  7      [Key]
  8      public int Id { get; set; }
  9      [Required]
 10      public string Login { get; set; }
 11      [Required]
 12      public string Email { get; set; }
 13      [Required]
 14      public string PasswordHash { get; set; }
 15      [Required]
 16      public string PasswordSalt { get; set; }
 17      [Required]
 18      public bool IsAdmin { get; set; }
 19  }
 
